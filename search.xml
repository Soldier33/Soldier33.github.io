<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试-综合题</title>
      <link href="/p/cc22.html"/>
      <url>/p/cc22.html</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="1-for循环-setTimeout"><a href="#1-for循环-setTimeout" class="headerlink" title="1. for循环 + setTimeout"></a>1. for循环 + setTimeout</h2><p><a href="https://www.cnblogs.com/xjnotxj/p/7452698.html" target="_blank" rel="noopener">原文</a></p><h3 id="1-1-setTimeout-和-setInterval-的执行机制"><a href="#1-1-setTimeout-和-setInterval-的执行机制" class="headerlink" title="1.1 setTimeout 和 setInterval 的执行机制"></a>1.1 setTimeout 和 setInterval 的执行机制</h3><p>在日常编码中，你会发现，给 setTimeout 和 setInterval 设定延迟时间往往并不准，或者干脆 setTimeout(function(){xxx},0) 也不是立马执行（特别是有耗时代码在前），这是因为 js 是<strong>单线程</strong>的，有一个<strong>事件队列</strong>机制，setTimeout 和 setInterval 的回调会到了延迟时间塞入事件队列中，排队执行。</p><blockquote><p>setTimeout ：延时 delay 毫秒之后，啥也不管，直接将回调函数加入事件队列。<br>setInterval ：延时 delay 毫秒之后，先看看事件队列中是否存在还没有执行的回调函数（ setInterval 的回调函数），如果存在，就不要再往事件队列里加入回调函数了。</p></blockquote><p>看下面示例：</p><pre><code>for (var i = 0; i &lt; 5; i++) {    setTimeout(function() {        console.log(i);    }, 1000);}</code></pre><p>结果：1 秒之后，同时输出 5 个 5。</p><p>因为 for 循环会先执行完（同步优先于异步优先于回调），这时五个 setTimeout 的回调全部塞入了事件队列中，然后 1 秒后一起执行了。</p><h3 id="1-2-正文"><a href="#1-2-正文" class="headerlink" title="1.2. 正文"></a>1.2. 正文</h3><p>接下来就是那道经典的代码：</p><pre><code>for (var i = 0; i &lt; 5; i++) {     setTimeout(function (){        console.log(i);       },1000);  }</code></pre><p>结果：5 5 5 5 5</p><p>为什么不是 1 2 3 4 5，问题出在<strong>作用域</strong>上。</p><p>因为 setTimeout 的 console.log(i); 的i是 var 定义的，所以是函数级的作用域，不属于 for 循环体，属于 global。等到 for 循环结束，i 已经等于 5 了，这个时候再执行 setTimeout 的五个回调函数（参考上面对事件机制的阐述），里面的 console.log(i); 的 i 去向上找作用域，只能找到 global下 的 i，即 5。所以输出都是 5。</p><p><strong>解决办法：人为给 console.log(i); 创造作用域，保存i的值。</strong></p><h4 id="解决办法一"><a href="#解决办法一" class="headerlink" title="解决办法一"></a>解决办法一</h4><pre><code>for (var i = 0; i &lt; 5; i++) {      (function(i){      //立刻执行函数        setTimeout(function (){            console.log(i);           },1000);       })(i);    }</code></pre><p>这里用到<strong>立刻执行函数</strong>。这样 console.log(i); 中的i就保存在每一次循环生成的立刻执行函数中的作用域里了。</p><h4 id="解决办法二"><a href="#解决办法二" class="headerlink" title="解决办法二"></a>解决办法二</h4><pre><code>for (let i = 0; i &lt; 5; i++) {     //let 代替 var    setTimeout(function (){        console.log(i);       },1000);  }</code></pre><p><strong>let</strong> 为代码块的作用域，所以每一次 for 循环，console.log(i); 都引用到 for 代码块作用域下的i，因为这样被引用，所以 for 循环结束后，这些作用域在 setTimeout 未执行前都不会被释放。</p><h4 id="更多解法"><a href="#更多解法" class="headerlink" title="更多解法"></a><a href="https://zhuanlan.zhihu.com/p/86267065" target="_blank" rel="noopener">更多解法</a></h4><h3 id="1-3-补充"><a href="#1-3-补充" class="headerlink" title="1.3. 补充"></a>1.3. 补充</h3><p>在写示例代码的过程中，发现一个语法点：</p><pre><code> function a(i){     console.log(i);    }for (var i = 0; i &lt; 5; i++) {     setTimeout(a(i),1000); }    </code></pre><p>报错：</p><blockquote><p>TypeError: “callback” argument must be a function<br>at setTimeout (timers.js:421:11)<br>……</p></blockquote><p>百度了下，原来 <strong>setTimeout 不支持传带参数的函数</strong>，有两种解决方案：</p><h4 id="（1）匿名函数包装"><a href="#（1）匿名函数包装" class="headerlink" title="（1）匿名函数包装"></a>（1）匿名函数包装</h4><pre><code>function a(i){     console.log(i);   }for (var i = 0; i &lt; 5; i++) {     setTimeout(function(){  //用匿名函数包装        a(i);    },1000); }    </code></pre><h4 id="（2）setTimeout-的第-3-个参数"><a href="#（2）setTimeout-的第-3-个参数" class="headerlink" title="（2）setTimeout 的第 3+ 个参数"></a>（2）setTimeout 的第 3+ 个参数</h4><blockquote><p>setTimeout(func, delay, param1, param2, …)<br>第三个参数及以后的参数都可以作为 func 函数的参数</p></blockquote><pre><code>function a(i){     console.log(i);    }for (var i = 0; i &lt; 5; i++) {     setTimeout(a,1000,i);   //传入第3个参数}  </code></pre><h2 id="2-立即执行函数，局部变量，全局变量"><a href="#2-立即执行函数，局部变量，全局变量" class="headerlink" title="2. 立即执行函数，局部变量，全局变量"></a>2. 立即执行函数，局部变量，全局变量</h2><p><a href="https://www.nowcoder.com/questionTerminal/1abc96ab343f49368cb9564dfc69dd6a" target="_blank" rel="noopener">参考文章</a></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>n<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 形参实参对齐，此时foo指向外部变量</span>    <span class="token keyword">var</span> foo<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 变量提升,外部变量已声明，不做改变</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1</span>    foo<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 外部变量改变，n=3</span>    foo <span class="token operator">=</span> <span class="token punctuation">{</span>n<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// foo是内部参数，内部变量，指向了新地址</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>n<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 内部变量，2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>n<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 内部变量已销毁，外部变量，3</span></code></pre><p>如果还不理解，以下图片再帮助理解</p><p><img src="https://uploadfiles.nowcoder.com/images/20170912/9009821_1505180362387_97D21DE44FABA3B5DD5EBF8FB345130E" alt=""></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>n<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>foo1<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">var</span> foo1<span class="token punctuation">;</span>                 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo1<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>     foo1<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>              foo1 <span class="token operator">=</span> <span class="token punctuation">{</span>n<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo1<span class="token punctuation">.</span>n<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>n<span class="token punctuation">)</span>       </code></pre><h2 id="3-Js作用域"><a href="#3-Js作用域" class="headerlink" title="3. Js作用域"></a>3. Js作用域</h2><p><a href="https://juejin.im/post/5abb99e9f265da2392366824" target="_blank" rel="noopener">参考文章-函数的调用</a></p><p><a href="https://juejin.im/post/5abb99e9f265da2392366824" target="_blank" rel="noopener">参考文章</a></p><blockquote><ol><li>全局作用域</li><li>函数作用域</li><li>块级作用域</li><li>词法作用域</li><li>动态作用域 动态作用域跟 this 引用机制相关</li></ol></blockquote><p>词法作用域，也就是静态作用域。</p><p><strong>JS引擎总会从最近的一个域，向外层域查找</strong></p><pre><code>var value = 1;function foo() {    console.log(value);}function bar() {    var value = 2;    foo();}bar();  //1</code></pre><p>foo没有被挂载，或默认全局</p><pre><code>var scope = &quot;global scope&quot;;function checkscope(){    var scope = &quot;local scope&quot;;    function f(){        return scope;    }    return f();}checkscope();   //local scope</code></pre><p>词法作用域，函数的作用域基于函数创建的位置。</p><p>这个例子个人理解，由于返回值是一个函数，故是闭包，可以访问到内部变量，故是local scope</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-11版本前后输出结果不同</title>
      <link href="/p/d55b.html"/>
      <url>/p/d55b.html</url>
      
        <content type="html"><![CDATA[<p><strong>由于node版本更新到11，Event Loop运行原理发生了变化，一旦执行一个阶段里的一个宏任务(setTimeout,setInterval和setImmediate)就立刻执行微任务队列，这点就跟浏览器端一致</strong>。</p><pre class=" language-js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行结果多数是5 1 3 4 2，而少数结果，是当运行较长时出现了5 1 3 2 4         node 版本v10.16.0</span><span class="token comment" spellcheck="true">//5 1 3 4 2         node 版本v12.16.1</span></code></pre><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1 7 6 8 2 4 9 11 3 10 5 12     node 版本v10.16.0</span><span class="token comment" spellcheck="true">//1 7 6 8 2 4 3 5  9 11 10 12    node 版本v12.16.1</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css-常见知识点</title>
      <link href="/p/d0a.html"/>
      <url>/p/d0a.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-px-、-rem-、em"><a href="#1-px-、-rem-、em" class="headerlink" title="1. px 、 rem 、em"></a>1. px 、 rem 、em</h2><ul><li>px是相对于显示器屏幕分辨率</li><li>rem是根据根元素的字体大小定的</li><li>em是根据自身元素的字体大小定的，如果自身没有，那可以从父元素继承字体大小</li></ul><h2 id="2-伪类和伪元素"><a href="#2-伪类和伪元素" class="headerlink" title="2. 伪类和伪元素"></a>2. 伪类和伪元素</h2><p><a href="https://juejin.im/post/5ca19f176fb9a05e711b2132" target="_blank" rel="noopener">参考文章</a></p><ul><li>伪类和伪元素都是用来表示文档树以外的”元素”。</li><li>伪类和伪元素分别用单冒号<code>:</code>和双冒号<code>::</code>来表示。</li><li>伪类和伪元素的区别，最关键的点在于如果没有伪元素(或伪类)，是否需要添加元素才能达到目的，如果是则是伪元素，反之则是伪类。</li></ul><h2 id="3-css选择器"><a href="#3-css选择器" class="headerlink" title="3. css选择器"></a>3. css选择器</h2><ol><li><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3></li><li><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3></li><li><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3></li><li><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3></li><li><h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3></li></ol><h2 id="4-margin和padding"><a href="#4-margin和padding" class="headerlink" title="4. margin和padding"></a>4. margin和padding</h2><p>margin是指从自身边框到另一个容器边框之间的距离，就是容器外距离。</p><p>padding是指自身边框到自身内部另一个容器边框之间的距离，就是容器内距离。</p><h2 id="5-margin、padding和translate百分比"><a href="#5-margin、padding和translate百分比" class="headerlink" title="5. margin、padding和translate百分比"></a>5. margin、padding和translate百分比</h2><ul><li>margin：按照父元素的宽来计算的</li><li>padding：按照父元素的宽来计算的</li><li>translate：是按照本身的宽高计算的</li></ul><h2 id="6-translate、transform、transition"><a href="#6-translate、transform、transition" class="headerlink" title="6. translate、transform、transition"></a>6. translate、transform、transition</h2><p><a href="https://www.cnblogs.com/xiaobai-y/p/10724083.html" target="_blank" rel="noopener">参考文章</a></p><p>translate:移动，transform的一个方法</p><p>transform:变形。改变</p><p>transition: 允许CSS属性值在一定的时间区间内平滑的过渡</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试-算法题</title>
      <link href="/p/e715.html"/>
      <url>/p/e715.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-对应关系"><a href="#1-对应关系" class="headerlink" title="1. 对应关系"></a>1. 对应关系</h2><p>将str 转换成str1与str2的对应关系，大写对应大写，小写对应小写</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>    <span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">'QWERTYUIOPASDFGHJKLZXCVBNM'</span>    <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> char1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 大写，小写, 其他（空格句号）</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>char1<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> char2 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>char1<span class="token punctuation">)</span>              res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str2<span class="token punctuation">[</span>char2<span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>char1<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> char2 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>char1<span class="token punctuation">)</span>            res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str2<span class="token punctuation">[</span>char2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>char1<span class="token punctuation">)</span>           <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">"HA 5ah"</span><span class="token punctuation">)</span></code></pre><h2 id="2-正方形切割"><a href="#2-正方形切割" class="headerlink" title="2. 正方形切割"></a>2. 正方形切割</h2><p>输入矩形的长宽，切割成尽可能大的正方形</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>long<span class="token punctuation">,</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>long <span class="token operator">&lt;</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>        long <span class="token operator">^</span><span class="token operator">=</span> width        width <span class="token operator">^</span><span class="token operator">=</span> long        long <span class="token operator">^</span><span class="token operator">=</span> width    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>long <span class="token operator">-</span> width <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span>        <span class="token keyword">var</span> temp <span class="token operator">=</span> long        long <span class="token operator">=</span>  width        width <span class="token operator">=</span> temp <span class="token operator">-</span> width    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span></code></pre><h2 id="3-数组反转"><a href="#3-数组反转" class="headerlink" title="3. 数组反转"></a>3. 数组反转</h2><p>实现⼀个函数 reverse(a, n) ，反转⼀个含有 n 个整数的数组 a（直接在数组a上操作，元素交换次数 </p><p>尽可能少，不能使⽤js Array 类内置属性和⽅法）。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//样例</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// x = [3, 2, 1, 0]</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token function">reverse</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// y = [1, 4, 3, 2, 1]</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> a<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token operator">-</span>i<span class="token punctuation">]</span>        a<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> a<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token operator">-</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="4-不相邻之和"><a href="#4-不相邻之和" class="headerlink" title="4. 不相邻之和"></a>4. 不相邻之和</h2><p>给定⼀个整数数组 a，实现⼀个函数 countMax(a) ，计算出从 a 中选择出多个不相邻元素组成最⼤的 </p><p>和是多少。 </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//样例</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token function">countMax</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 7 </span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token function">countMax</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 16</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">countMax</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> len <span class="token operator">=</span> x<span class="token punctuation">.</span>length    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">countMax</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="5-有效括号"><a href="#5-有效括号" class="headerlink" title="5. 有效括号"></a>5. 有效括号</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> isValid <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> obj  <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'('</span><span class="token punctuation">:</span> <span class="token string">')'</span><span class="token punctuation">,</span>    <span class="token string">'{'</span>： <span class="token string">'}'</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> ch <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token keyword">in</span> obj<span class="token punctuation">)</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">!=</span> map<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span>length    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="6-最长有效括号"><a href="#6-最长有效括号" class="headerlink" title="6. 最长有效括号"></a>6. 最长有效括号</h2><p>暴力法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">longV</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> max    <span class="token keyword">var</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> tmpMax <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span>                tmpMax<span class="token operator">++</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    max <span class="token operator">=</span> max <span class="token operator">&lt;</span> tmpMax<span class="token operator">?</span> tmpMax<span class="token punctuation">:</span>max                    <span class="token keyword">break</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    tmpMax<span class="token operator">++</span>                <span class="token punctuation">}</span>                 <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                max <span class="token operator">=</span> max<span class="token operator">&lt;</span>tmpMax<span class="token operator">?</span>tmpMax<span class="token punctuation">:</span>max        <span class="token punctuation">}</span>        stack <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">}</span></code></pre><p>再优化,时间复杂度降为O(n)</p><pre><code>function longV(s) {    var max = 0      if(s.length == 0 || s.length ==1)            return max       var stack = [-1]        for(var i = 0; i &lt; s.length; i++) {               if(s[i] == &#39;(&#39;) {            stack.push(&#39;i&#39;)        } else {            stack.pop()            if(stack.length &lt; 1) {                stack.push(i)            } else {                max = Math.max(max, i-stack[stack.length-1])            }        }    }           return max}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
            <tag> 算法 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx-开启gzip配置</title>
      <link href="/p/921a.html"/>
      <url>/p/921a.html</url>
      
        <content type="html"><![CDATA[<pre class=" language-js"><code class="language-js">http <span class="token punctuation">{</span>  include       conf<span class="token operator">/</span>mime<span class="token punctuation">.</span>types<span class="token punctuation">;</span>  gzip on<span class="token punctuation">;</span>  gzip_min_length  <span class="token number">1000</span><span class="token punctuation">;</span>  gzip_buffers     <span class="token number">4</span> 8k<span class="token punctuation">;</span>     gzip_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>   gzip_types       text<span class="token operator">/</span>plain application<span class="token operator">/</span>x<span class="token operator">-</span>javascript text<span class="token operator">/</span>css application<span class="token operator">/</span>xml application<span class="token operator">/</span>javascript application<span class="token operator">/</span>json<span class="token punctuation">;</span>  <span class="token operator">...</span><span class="token operator">...</span>  <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js-简要笔记</title>
      <link href="/p/df71.html"/>
      <url>/p/df71.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>不改变原数组方法</p><p>concat() ，join()，slice()  ，toString()</p></li><li><p>改变原数组方法</p><p>pop()，push()，reverse() ，shift()，sort()，splice() ，unshift() ，</p><p>copyWith(), fill()</p><p>面试题：</p></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token keyword">delete</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">////不会改变数组的长度</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[ &lt;1 empty item>, 'b', 'c' ]</span>a<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//会改变数组的长度</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//2</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js-Object属性之查看</title>
      <link href="/p/7035.html"/>
      <url>/p/7035.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-属性的查看"><a href="#1-属性的查看" class="headerlink" title="1. 属性的查看"></a>1. 属性的查看</h2><h3 id="1-1-Object-keys（）"><a href="#1-1-Object-keys（）" class="headerlink" title="1.1 Object.keys（）"></a>1.1 Object.keys（）</h3><p>返回所有可枚举属性的字符串数组。</p><h3 id="1-2-Object-getOwnPropertyNames"><a href="#1-2-Object-getOwnPropertyNames" class="headerlink" title="1.2 Object.getOwnPropertyNames()"></a>1.2 Object.getOwnPropertyNames()</h3><p>返回一个由指定对象的所有自身属性的属性名（包括<code>不可枚举</code>属性但不包括Symbol值作为名称的属性）组成的数组。</p><h2 id="2-属性的删除：delete"><a href="#2-属性的删除：delete" class="headerlink" title="2. 属性的删除：delete"></a>2. 属性的删除：delete</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>      p<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["p"]</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>p <span class="token comment" spellcheck="true">// true</span>obj<span class="token punctuation">.</span>p <span class="token comment" spellcheck="true">// undefined</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// []</span></code></pre><p>delete 删除对象的属性，删除成功后返回true。</p><p><strong>如果删除一个不存在的属性，不会报错，返回true。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>deleter obj<span class="token punctuation">.</span>p <span class="token comment" spellcheck="true">//true</span></code></pre><p>只有当该属性存在，且不得删除时才返回false，另外，</p><p>delete只能删除自身的属性，不能删除继承的属性，但是仍然会返回true，只是不能删除。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>toString <span class="token comment" spellcheck="true">// true</span>obj<span class="token punctuation">.</span>toString <span class="token comment" spellcheck="true">// function toString() { [native code] }</span></code></pre><h2 id="3-判断属性是否存在-：in"><a href="#3-判断属性是否存在-：in" class="headerlink" title="3. 判断属性是否存在 ：in"></a>3. 判断属性是否存在 ：in</h2><p><code>in</code>运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回<code>true</code>，否则返回<code>false</code>。它的左边是一个字符串（要用引号包裹），表示属性名，右边是一个对象。</p><p>它不能识别哪些属性是对象自身的，哪些属性是继承的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    p<span class="token punctuation">:</span><span class="token string">'123'</span><span class="token punctuation">}</span><span class="token string">'p'</span> <span class="token keyword">in</span> obj  <span class="token comment" spellcheck="true">//true</span><span class="token string">'toString'</span> <span class="token keyword">in</span> obj <span class="token comment" spellcheck="true">//true</span></code></pre><h2 id="4-判断是否是自身属性-hasOwnProperty"><a href="#4-判断是否是自身属性-hasOwnProperty" class="headerlink" title="4. 判断是否是自身属性: hasOwnProperty"></a>4. 判断是否是自身属性: hasOwnProperty</h2><pre class=" language-java"><code class="language-java">obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'toString'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// false</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>  <code>for...in</code>遍历时与  <code>hasOwnProperty</code>方法结合，判断它是否是自身的属性。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'魏无羡'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token string">'22'</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> p <span class="token keyword">in</span> person<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>person<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pm2-常用命令</title>
      <link href="/p/8e71.html"/>
      <url>/p/8e71.html</url>
      
        <content type="html"><![CDATA[<p>PM2是node进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。</p><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><blockquote><p>npm install -g pm2</p></blockquote><h3 id="自动重启"><a href="#自动重启" class="headerlink" title="自动重启"></a>自动重启</h3><blockquote><p>pm2 start app.js –-watch</p></blockquote><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><blockquote><p>pm2 restart app.js</p></blockquote><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><p>停止特定的应用。可以先通过pm2 list获取应用的名字（–name指定的）或者进程id。</p><blockquote><p>pm2 stop app_name|app_id</p></blockquote><h3 id="查看进程状态"><a href="#查看进程状态" class="headerlink" title="查看进程状态"></a>查看进程状态</h3><blockquote><p>pm2 </p><p>或pm2 list</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-常见问题简单概括</title>
      <link href="/p/845a.html"/>
      <url>/p/845a.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-为什么组件中的data必需是函数"><a href="#1-为什么组件中的data必需是函数" class="headerlink" title="1. 为什么组件中的data必需是函数"></a>1. 为什么组件中的data必需是函数</h2><p>因为组件是要重复使用的，当data是函数并且在多次调用的时候，<br>所占的内存块不一样，所以data中的数据互不影响。</p><h2 id="2-v-for中key的作用"><a href="#2-v-for中key的作用" class="headerlink" title="2. v-for中key的作用"></a>2. v-for中key的作用</h2><p> 加上key之后，能够更好的复用，减少资源的消耗。</p><pre><code>&lt;li v-for=&quot;item in list&quot; :key=&quot;item&quot;&gt;{{item}}&lt;/li&gt;</code></pre><p><strong>没加key之前，如果向数组中间添加一个元素，要依次替换数组元素，</strong></p><p><strong>加上key之后，可以直接在数组中间插入这个元素。</strong></p><h2 id="3-过滤器filters获取不到data数据"><a href="#3-过滤器filters获取不到data数据" class="headerlink" title="3.过滤器filters获取不到data数据"></a>3.过滤器filters获取不到data数据</h2><p>因为获取不到this对象</p><p>尤雨溪解释：这是2.x中故意的。 过滤器应该是纯函数，不应该依赖于这个上下文。 如果您需要这个，您应该使用一个计算属性或只是一个方法。</p><p>filters一般做只处理HTML页面的数据的事；<br>computed一般做只处理data中的数据的事。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试-重要知识点</title>
      <link href="/p/cc22.html"/>
      <url>/p/cc22.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-get和post的区别"><a href="#1-get和post的区别" class="headerlink" title="1. get和post的区别"></a>1. get和post的区别</h2><p><a href="https://www.cnblogs.com/logsharing/p/8448446.html" target="_blank" rel="noopener">参考文章1</a></p><p><a href="https://learnku.com/docs/f2e-performance-rules/try-to-use-get-method-when-ajax/6384" target="_blank" rel="noopener">参考文章2</a></p><p><img src="https://cdn.learnku.com/uploads/images/201912/13/1/PmETKZFicM.png!large" alt=""></p><ul><li><p>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</p></li><li><p>GET参数通过URL传递，POST放在Request body中。</p></li><li><p>使用 XMLHttpRequest 时，浏览器的 POST 请求是通过一个两步的过程来实现的：先发送 HTTP 头再发送数据。</p><p>GET 请求，它只需要发送一个 TCP 报文（除非 Cookie 特别多）。</p></li></ul><h2 id="2-this的指向"><a href="#2-this的指向" class="headerlink" title="2. this的指向"></a>2. this的指向</h2><p><a href="https://juejin.im/post/59bfe84351882531b730bac2" target="_blank" rel="noopener">参考文章</a></p><p><strong>this 永远指向最后调用它的那个对象</strong></p><p><strong>箭头函数的 this 始终指向函数定义时的 this，而非执行时。</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    say<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span></code></pre><p>对象没有作用域，这里的this指向全局</p><h2 id="3-前端性能优化"><a href="#3-前端性能优化" class="headerlink" title="3. 前端性能优化"></a>3. 前端性能优化</h2><p><a href="https://learnku.com/docs/f2e-performance-rules" target="_blank" rel="noopener">雅虎35条前端性能优化</a></p><p><a href="https://juejin.im/book/5b936540f265da0a9624b04b" target="_blank" rel="noopener">前端性能优化原理与实践</a></p><p><img src="https://user-gold-cdn.xitu.io/2018/8/15/1653cde6a580cb29?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="1584704984878"></p><h2 id="4-缓存"><a href="#4-缓存" class="headerlink" title="4. 缓存"></a>4. 缓存</h2><p><a href="https://www.imooc.com/article/22841" target="_blank" rel="noopener">参考文章</a></p><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>只要请求了一次，在有效时间内，不会再请求服务器</p><p>cache-control优先级 &gt; expires优先级。</p><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>无论是否变化，是否过期都会发起请求，如果内容没过期，直接返回304，从浏览器缓存中拉取文件，否则直接返回更新后的内容。</p><p>ETag优先级 &gt; Last-Modified优先级。</p><p>PS:强缓存优先级 &gt; 对比缓存优先级</p><h2 id="5-跨域解决方案"><a href="#5-跨域解决方案" class="headerlink" title="5.跨域解决方案"></a>5.跨域解决方案</h2><p>协议、IP地址和端口不同都是跨域行为</p><p>前端方式：</p><ol><li><p>nginx反向代理</p></li><li><p>Webpack proxy(打包之后就失效了，只解决了开发环境下的跨域问题) </p></li><li><p>jsonp（相当于插入script标签，只能使用get请求）</p></li></ol><p>后端方式： </p><p>cors，后端设置，前端不用管</p><p>设置响应头的<code>Access-Control-Allow-Methods</code>，<code>Access-Control-Allow-Headers</code>，</p><p><code>Access-Control-Allow-Origin</code></p><p>PS: 故推荐nginx反向代理和cors。</p><h2 id="6-CSRF和XSS"><a href="#6-CSRF和XSS" class="headerlink" title="6. CSRF和XSS"></a>6. CSRF和XSS</h2><p><a href="https://www.bilibili.com/video/av33502871?from=search&seid=16660325139931047570" target="_blank" rel="noopener">参考视频</a></p><p>CSRF: 跨站点请求伪造(Cross—Site Request Forgery)</p><p>攻击者盗用了你的身份，以你的名义发送恶意请求。</p><p>CSRF防御之道：</p><ol><li><p>尽量使用POST</p></li><li><p>加入验证码</p></li><li><p>验证Referer</p></li><li><p>Anti CSRF Token</p><p>在from表单或头信息中传递token</p><p>token存储在服务端</p><p>服务端通过拦截器验证有效性</p><p>验证失败的拒绝请求</p></li></ol><hr><p>XSS : 跨站脚本(Cross Site Scripting )</p><p><strong>是一种代码注入攻击</strong><br>主要分为三类：</p><ol><li>反射性: xss代码在请求url中攻击</li><li>存储型: 将攻击脚本存入服务端，从而传播</li><li>dom型: 通过dom修改页面内容</li></ol><ul><li>预防</li></ul><ol><li>输入过滤: 例如过滤<code>&lt;script&gt;</code>等</li><li>输出转义: 例如将<code>&lt;</code>,<code>&gt;</code>,<code>/</code>等字符利用转义符号转换一下</li><li>使用http-only: 在 cookie 中设置 HttpOnly 属性后，让js脚本无法访问cookie</li><li>尽量使用post方法，使用get的时候限制一下长度</li></ol><h2 id="7-从输入URL到看到页面发生了什么？"><a href="#7-从输入URL到看到页面发生了什么？" class="headerlink" title="7.  从输入URL到看到页面发生了什么？"></a>7.  从输入URL到看到页面发生了什么？</h2><p><a href="https://juejin.im/post/5cc573c85188252e741ccbb6" target="_blank" rel="noopener">参考文章-强烈推荐</a></p><ul><li>DNS解析</li><li>发起TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>连接结束。</li></ul><h2 id="8-TCP三次握手"><a href="#8-TCP三次握手" class="headerlink" title="8. TCP三次握手"></a>8. TCP三次握手</h2><p>用我自己简单的话解释为：</p><p>客户端说：我要发了                            （syn）</p><p>服务端说:  我知道了，你发吧                (ack,syn)</p><p>客户端说：我也知道了                            (ack)</p><ol><li>客户端发送syn（同步序列编号）请求，进入syn_send状态，等待确认</li><li>服务端接受syn包并确认，发送syn + ack包，进入syn_recv状态</li><li>客户端接受syn + ack包，发送ack包，双方进入established状态</li></ol><h2 id="9-TCP四次挥手"><a href="#9-TCP四次挥手" class="headerlink" title="9. TCP四次挥手"></a>9. TCP四次挥手</h2><p>用我自己简单的话解释为：</p><p>客户端说：我不说了                             （fin）</p><p>服务端说:  我知道了                               (ack)</p><p>(….. )</p><p>服务端说: 我也不说了                            （fin）</p><p>客户端说：我也知道了                            (ack)</p><blockquote><p> 为什么服务端不把‘’我知道了，我也不说了“（ack和fin）  一次说了,</p><p>因为客户端还能接受，这省略号代表服务端可能还说了什么话让客户端听了。 </p></blockquote><ol><li>客户端发送fin给服务端，用于关闭client到server的数据传输。客户端进入fin_wait状态</li><li>服务端接受fin后，发送一个ack包给客户端。服务端进入close_wait状态</li><li>服务端发送一个fin给客户端，用于关闭server到client的数据传输。服务端进入last_ack状态</li><li>客户端收到fin后，进入time_wait状态，接着发送一个ack给服务端，服务端进入closed状态</li></ol><blockquote><p>为什么建立是3次握手，而关闭是4次挥手呢？  </p></blockquote><p>因为建立连接的时候，客户端接受的是syn + ack包。而关闭的时候，服务端接受fin后，客户端仅仅是不再发送数据，但是还是可以接收数据的。服务端此时可以选择立刻关闭连接，或者再发送一些数据之后，再发送fin包来关闭连接。因此fin与ack包一般都会分开发送。</p><h2 id="10-HTTP协议头部与Keep-Alive模式"><a href="#10-HTTP协议头部与Keep-Alive模式" class="headerlink" title="10. HTTP协议头部与Keep-Alive模式"></a>10. HTTP协议头部与Keep-Alive模式</h2><p><a href="https://www.byvoid.com/zhs/blog/http-keep-alive-header" target="_blank" rel="noopener">参考文章1</a></p><p><a href="https://blog.csdn.net/xiaoduanayu/article/details/78386508" target="_blank" rel="noopener">参考文章2</a></p><ol><li>在http头加入”Connection: Keep-Alive”</li></ol><p>当使用Keep-Alive模式（又称持久连接、连接重用）时，Keep-Alive功能使客户端到服 务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。</p><p>一般服务端都会设置keep-alive超时时间,</p><p>还会设置一个参数叫最大请求数。</p><ol start="2"><li>在于保持长连接后，浏览器如何知道服务器已经响应完成？</li></ol><p>Content-Length字段必须真实反映响应体长度。</p><p><code>Transfer-Encoding: chunked</code>表示响应体内容用的是分块传输，此时服务器可以将数据一块一块地分块响应给浏览器而不必一次性全部响应，待浏览器接收到全部分块后就表示响应结束。</p><h2 id="11-HTTP1-0、HTTP1-1-HTTP2-0-HTTP3-0-的区别"><a href="#11-HTTP1-0、HTTP1-1-HTTP2-0-HTTP3-0-的区别" class="headerlink" title="11. HTTP1.0、HTTP1.1 ,HTTP2.0 ,HTTP3.0 的区别"></a>11. HTTP1.0、HTTP1.1 ,HTTP2.0 ,HTTP3.0 的区别</h2><p><a href="https://juejin.im/entry/5981c5df518825359a2b9476" target="_blank" rel="noopener">参考文章</a></p><p><a href="https://juejin.im/post/5dc37277f265da4d57771f87#heading-11" target="_blank" rel="noopener">参考文章</a></p><h3 id="1-HTTP基本优化"><a href="#1-HTTP基本优化" class="headerlink" title="1. HTTP基本优化"></a>1. HTTP基本优化</h3><p>影响一个 HTTP 网络请求的因素主要有两个：<strong>带宽和延迟。</strong></p><h3 id="2-HTTP1-0和HTTP1-1的一些区别"><a href="#2-HTTP1-0和HTTP1-1的一些区别" class="headerlink" title="2. HTTP1.0和HTTP1.1的一些区别"></a><strong>2. HTTP1.0和HTTP1.1的一些区别</strong></h3><ol><li><strong>缓存处理</strong>，在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。</li><li><strong>带宽优化及网络连接的使用</strong>，HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li><li><strong>错误通知的管理</strong>，在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。</li><li><strong>Host头处理</strong>，在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。</li><li><strong>长连接</strong>，HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。</li></ol><h3 id="3-HTTP2-0和HTTP1-X相比的新特性"><a href="#3-HTTP2-0和HTTP1-X相比的新特性" class="headerlink" title="3. HTTP2.0和HTTP1.X相比的新特性"></a><strong>3. HTTP2.0和HTTP1.X相比的新特性</strong></h3><ul><li><strong>新的二进制格式</strong>（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。</li><li><strong>多路复用</strong>（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。</li><li><strong>header压缩</strong>，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。</li><li><strong>服务端推送</strong>（server push），同SPDY一样，HTTP2.0也具有server push功能。</li></ul><h3 id="4-http2-的多路复用"><a href="#4-http2-的多路复用" class="headerlink" title="4. http2 的多路复用"></a>4. http2 的多路复用</h3><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/14#" target="_blank" rel="noopener">参考文章</a></p><p>简单来说， 就是在同一个TCP连接，同一时刻可以传输多个HTTP请求。</p><blockquote><p>之前是同一个连接只能用一次， 如果开启了keep-alive，虽然可以用多次，但是同一时刻只能有一个HTTP请求</p></blockquote><p>在 HTTP/1 中，每次请求都会建立一次HTTP连接，也就是我们常说的3次握手4次挥手，这个过程在一次请求过程中占用了相当长的时间，即使开启了 Keep-Alive ，解决了多次连接的问题，但是依然有两个效率上的问题：</p><ul><li>第一个：串行的文件传输。当请求a文件时，b文件只能等待，等待a连接到服务器、服务器处理文件、服务器返回文件，这三个步骤。我们假设这三步用时都是1秒，那么a文件用时为3秒，b文件传输完成用时为6秒，依此类推。（注：此项计算有一个前提条件，就是浏览器和服务器是单通道传输）</li><li>第二个：连接数过多。我们假设Apache设置了最大并发数为300，因为浏览器限制，浏览器发起的最大请求数为6，也就是服务器能承载的最高并发为50，当第51个人访问时，就需要等待前面某个请求处理完成。</li></ul><p>HTTP/2的多路复用就是为了解决上述的两个性能问题。<br>在 HTTP/2 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。<br>帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。<br>多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。</p><h3 id="5-HTTP3-0是什么？"><a href="#5-HTTP3-0是什么？" class="headerlink" title="5.  HTTP3.0是什么？"></a>5.  HTTP3.0是什么？</h3><p>HTTP3.0基于UDP的安全可靠的HTTP2.0协议。</p><p><strong>减少了TCP三次握手及TLS握手时间</strong></p><p><strong>多路复用丢包时的线头阻塞问题</strong></p><p><strong>化重传策略</strong></p><p><strong>流量控制</strong></p><h2 id="12-Http与Https"><a href="#12-Http与Https" class="headerlink" title="12. Http与Https"></a>12. Http与Https</h2><p><a href="https://blog.csdn.net/qq_38289815/article/details/80969419?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">参考文章</a></p><h3 id="Http与Https的区别"><a href="#Http与Https的区别" class="headerlink" title="Http与Https的区别"></a><strong>Http与Https的区别</strong></h3><p>1、https协议需要到CA  （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(原来网易官网是http，而网易邮箱是https。)</p><p>2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p><p>3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p><p>4、http的连接很简单，是无连接的，是无状态的。（也可以设置keep-alive改变无连接状态）</p><p>Https协议是由SSL+Http协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><p>(无状态的意思是其数据包的发送、传输和接收都是相互独立的。</p><p>无连接的意思是指通信双方都不长久的维持对方的任何信息。)</p><h3 id="SSL协议"><a href="#SSL协议" class="headerlink" title="SSL协议"></a>SSL协议</h3><p>SSL协议可分为两层：</p><p>SSL记录协议（SSL Record Protocol），它建立在可靠的传输协议（如TCP）之上，为高层协议提供<a href="https://baike.baidu.com/item/数据封装" target="_blank" rel="noopener">数据封装</a>、压缩、加密等基本功能的支持。</p><p>SSL握手协议（SSL Handshake Protocol），它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</p><p><strong>SSL提供服务：机密性，可靠性，完整性</strong></p><h2 id="13-常见状态码区别"><a href="#13-常见状态码区别" class="headerlink" title="13. 常见状态码区别"></a>13. 常见状态码区别</h2><p><a href="https://juejin.im/post/5cc573c85188252e741ccbb6#heading-44" target="_blank" rel="noopener">参考文章</a></p><h3 id="200-成功"><a href="#200-成功" class="headerlink" title="200 成功"></a>200 成功</h3><p>请求成功，通常服务器提供了需要的资源。</p><h3 id="204-无内容"><a href="#204-无内容" class="headerlink" title="204 无内容"></a>204 无内容</h3><p>服务器成功处理了请求，但没有返回任何内容。</p><h3 id="301-永久移动"><a href="#301-永久移动" class="headerlink" title="301 永久移动"></a>301 永久移动</h3><p>请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</p><h3 id="302-临时移动"><a href="#302-临时移动" class="headerlink" title="302 临时移动"></a>302 临时移动</h3><p>服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p><h3 id="304-未修改"><a href="#304-未修改" class="headerlink" title="304 未修改"></a>304 未修改</h3><p>自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</p><h3 id="400-错误请求"><a href="#400-错误请求" class="headerlink" title="400 错误请求"></a>400 错误请求</h3><p>服务器不理解请求的语法。</p><h3 id="401-未授权"><a href="#401-未授权" class="headerlink" title="401 未授权"></a>401 未授权</h3><p>请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</p><h3 id="403-禁止"><a href="#403-禁止" class="headerlink" title="403 禁止"></a>403 禁止</h3><p>服务器拒绝请求。</p><h3 id="404-未找到"><a href="#404-未找到" class="headerlink" title="404 未找到"></a>404 未找到</h3><p>服务器找不到请求的网页。</p><h3 id="422-无法处理"><a href="#422-无法处理" class="headerlink" title="422 无法处理"></a>422 无法处理</h3><p>请求格式正确，但是由于含有语义错误，无法响应</p><h3 id="500-服务器内部错误"><a href="#500-服务器内部错误" class="headerlink" title="500 服务器内部错误"></a>500 服务器内部错误</h3><p>服务器遇到错误，无法完成请求。</p><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p><a href="https://www.cnblogs.com/testyao/p/6548261.html" target="_blank" rel="noopener">参考文章</a></p><p>1XX（信息类）</p><p>​    表示接收到请求并且继续处理</p><p>2XX（响应成功）</p><p>​    表示动作被成功接收、理解和接受</p><p>3XX（重定向类）</p><p>​    表示为了完成指定的动作，必须接收进一步处理</p><p>4XX（客户端错误）</p><p>​    表示包含错误语法或不能正确执行</p><p>5XX（服务器错误）</p><p>​    表示服务器或网关错误</p><h2 id="14-闭包"><a href="#14-闭包" class="headerlink" title="14.  闭包"></a>14.  闭包</h2><p><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="noopener">参考文章</a></p><p>闭包就是能够读取其他函数内部变量的函数。</p><p>闭包允许从内部函数访问外部函数的作用域。</p><p>用途：</p><ol><li>可以读取函数内部的变量</li><li>让变量的值始终保持在内存中</li></ol><p>注意：</p><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p><p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023021250770016" target="_blank" rel="noopener">参考文章</a></p><p>函数作为返回值</p><p>在对象内部封装一个私有变量,在没有<code>class</code>机制，只有函数的语言里，借助闭包，同样可以封装一个私有变量。我们用JavaScript创建一个计数器：</p><pre><code>&#39;use strict&#39;;function create_counter(initial) {    var x = initial || 0;    return {        inc: function () {            x += 1;            return x;        }    }}</code></pre><h2 id="15-内存泄漏"><a href="#15-内存泄漏" class="headerlink" title="15. 内存泄漏"></a>15. 内存泄漏</h2><p><a href="https://juejin.im/post/5c72019551882562811d5cf5" target="_blank" rel="noopener">参考文章</a></p><p><strong>不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）。</strong></p><h3 id="常见原因："><a href="#常见原因：" class="headerlink" title="常见原因："></a>常见原因：</h3><h4 id="1-意外的全局变量"><a href="#1-意外的全局变量" class="headerlink" title="1.  意外的全局变量"></a>1.  意外的全局变量</h4><p>变量在函数内,但是并没有声明.JS就会默认将它变为全局变量,这样在页面关闭之前都不会被释放</p><p>可使用严格模式可以避免.</p><h4 id="2-dom清空时，还存在引用"><a href="#2-dom清空时，还存在引用" class="headerlink" title="2.  dom清空时，还存在引用"></a>2.  dom清空时，还存在引用</h4><p>（1） DOM 结点暂时存储到数据结构中.但是在不需要该DOM节点时,忘记解除对它的引用</p><p>（2）DOM 节点绑定了事件, 但是在移除的时候没有解除事件绑定,那么仅仅移除 DOM 节点也是没用的</p><h4 id="3-定时器中的内存泄漏"><a href="#3-定时器中的内存泄漏" class="headerlink" title="3.  定时器中的内存泄漏"></a>3.  定时器中的内存泄漏</h4><p>如果没有清除定时器,那么 someResource 就不会被释放,如果刚好它又占用了较大内存,就会引发性能问题. 但是 <strong>setTimeout ,它计时结束后它的回调里面引用的对象占用的内存是可以被回收的.</strong> 当然有些场景 setTimeout 的计时可能很长, 这样的情况下也是需要纳入考虑的.</p><h4 id="4-不规范地使用闭包"><a href="#4-不规范地使用闭包" class="headerlink" title="4.  不规范地使用闭包"></a>4.  不规范地使用闭包</h4><p>相互循环引用.这是经常容易犯的错误,并且有时也<strong>不容易</strong>发现.</p><h3 id="避免策略："><a href="#避免策略：" class="headerlink" title="避免策略："></a>避免策略：</h3><ol><li>减少不必要的全局变量，或者生命周期较长的对象，及时对无用的数据进行垃圾回收(<strong>即赋值为null</strong>)；</li><li>注意程序逻辑，避免“死循环”之类的 ；</li><li>避免创建过多的对象 原则：<strong>不用了的东西要记得及时归还。</strong></li><li>减少层级过多的引用</li></ol><h2 id="16-垃圾回收"><a href="#16-垃圾回收" class="headerlink" title="16. 垃圾回收"></a>16. 垃圾回收</h2><p><a href="https://juejin.im/post/5b684f30f265da0f9f4e87cf" target="_blank" rel="noopener">参考文章</a></p><p>垃圾回收有两种实现方式，分别是<strong>标记清除</strong>和<strong>引用计数</strong></p><p>在现代浏览器中，Javascript 使用的方式是<strong>标记清除</strong></p><h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p>变量，在正在执行的程序中，则不会被回收。</p><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>变量，被引用的次数不为 0 时，则不会被回收。</p><p>缺点——循环引用</p><h2 id="17-前端本地存储"><a href="#17-前端本地存储" class="headerlink" title="17. 前端本地存储"></a>17. 前端本地存储</h2><p><a href="https://juejin.im/post/5c6bcdc8e51d45209a1ca3b6" target="_blank" rel="noopener">参考文章</a></p><h3 id="cookie：httpOnly与安全"><a href="#cookie：httpOnly与安全" class="headerlink" title="cookie：httpOnly与安全"></a>cookie：httpOnly与安全</h3><p>在客户端是不能通过js代码去设置一个httpOnly类型的cookie的，</p><p>这种类型的cookie只能通过服务端来设置。</p><p>目的：防止XSS攻击</p><h3 id="session和cookie区别"><a href="#session和cookie区别" class="headerlink" title="session和cookie区别"></a>session和cookie区别</h3><ul><li>session保存在服务器，cookie保存在客户端</li><li>session中保存的时对象，cookie保存的是字符串</li><li>session不能区分路径，同一个用户访问一个网站期间，所有的session在任何一个地方都可以访问</li><li>cookie如果设置路径，则在某些地方不能访问</li><li>session需要借助cookie才能正常工作，如果禁用cookie,session则失效</li><li>客户端会在发送请求的时候，自动将本地存活的cookie封装在信息头发送给服务器</li></ul><h3 id="cookie、localStorage、sessionStorage区别"><a href="#cookie、localStorage、sessionStorage区别" class="headerlink" title="cookie、localStorage、sessionStorage区别"></a>cookie、localStorage、sessionStorage区别</h3><ul><li><p>相同：在本地（浏览器端）存储数据</p></li><li><p>不同： </p><ul><li><p>localStorage只要在相同的协议、相同的主机名、相同的端口下，就能读取/修改到同一份localStorage数据。</p></li><li><p>sessionStorage比localStorage更严苛一点，除了协议、主机名、端口外，<strong>还要求在同一窗口（也就是浏览器的标签页）下。</strong></p></li><li><p><strong>localStorage是永久存储，除非手动删除。</strong></p></li><li><p><strong>sessionStorage当会话结束（当前页面关闭的时候，自动销毁）</strong></p></li><li><p><strong>cookie的数据会在每一次发送http请求的时候，同时发送给服务器</strong></p><p><strong>而localStorage、sessionStorage不会。</strong>。</p></li></ul></li></ul><h2 id="18-Promise"><a href="#18-Promise" class="headerlink" title="18. Promise"></a>18. Promise</h2><p><a href="https://zhuanlan.zhihu.com/p/29235579" target="_blank" rel="noopener">参考文章</a></p><ul><li>什么是Promise</li><li>传统的回调式异步操作有什么缺点？（Promise是如何解决异步操作）</li><li>Promise中的异步模式有哪些？有什么区别？</li><li>如果向Promise.all()和Promise.race()传递空数组，运行结果会有什么不同？</li><li>如何确保一个变量是可信任的Promise（Promise.resolve方法传入不同值的不同处理有哪些）</li><li>Promise是如何捕获异常的？与传统的try/catch相比有什么优势？</li></ul><p><a href="https://juejin.im/post/5e53192cf265da572017e9e3" target="_blank" rel="noopener">参考文章</a></p><h3 id="什么是Promise"><a href="#什么是Promise" class="headerlink" title="什么是Promise?"></a>什么是Promise?</h3><ol><li>抽象表达:Promise是js中运行<strong>异步编程</strong>的<strong>新</strong>的解决<strong>方案</strong>( 旧的是啥?–&gt;<strong>纯</strong>回调形式)</li><li>具体表达:<ol><li>从语法上来说:Promise是一个构造函数</li><li>从功能上来说:Promise对象用来封装一个异步操作并可以获得其结果</li></ol></li></ol><h3 id="为什么使用Promise"><a href="#为什么使用Promise" class="headerlink" title="为什么使用Promise?"></a>为什么使用Promise?</h3><h4 id="指定回调方式更加灵活"><a href="#指定回调方式更加灵活" class="headerlink" title="指定回调方式更加灵活"></a>指定回调方式更加灵活</h4><ul><li>旧的:必须在启动异步任务<strong>前</strong>指定回调函数</li><li>Promise:启动异步任务=&gt;返回promise对象=&gt;给promise对象绑定回调函数(甚至可以在异步任务结束后指定)</li></ul><h4 id="链式调用-解决回调地狱"><a href="#链式调用-解决回调地狱" class="headerlink" title="链式调用,解决回调地狱"></a>链式调用,解决回调地狱</h4><p><a href="https://juejin.im/post/5e7419c96fb9a07cae1383b5" target="_blank" rel="noopener">参考文章</a></p><p><a href="https://zhuanlan.zhihu.com/p/37527178" target="_blank" rel="noopener">参考文章</a></p><h3 id="all-race的场景"><a href="#all-race的场景" class="headerlink" title="all,race的场景"></a>all,race的场景</h3><p>有了all，你就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据。有一个场景是很适合用这个，一些游戏类的素材比较多的应用，打开网页时，预先加载需要用到的各种资源如图片、flash以及各种静态文件。所有的都加载完后，我们再进行页面的初始化。</p><p>用race给某个异步请求设置超时时间，并且在超时后执行相应的操作，代码如下：</p><p><img src="https://pic1.zhimg.com/80/v2-0f08fb0070cf5d2c2da5a8c92846c454_1440w.jpg" alt=""></p><h2 id="19-回调函数"><a href="#19-回调函数" class="headerlink" title="19. 回调函数"></a>19. 回调函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p> 函数A作为参数(函数引用)传递到另一个函数B中，并且这个函数B执行函数A。我们就说函数A叫做回调函数。</p><p> 你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。回答完毕。</p><h3 id="回调函数是闭包的"><a href="#回调函数是闭包的" class="headerlink" title="回调函数是闭包的"></a>回调函数是闭包的</h3><p>当作为参数传递一个回调函数给另一个函数时，回调函数将在包含函数函数体内的某个位置被执行，就像回调函数在包含函数的函数体内定义一样。这意味着回调函数是闭包的。从所周知，闭包函数可以访问包含函数的作用域，所以，回调函数可以访问包含函数的变量，甚至是全局变量。</p><p>回调只是一种实现方式，既可以有同步回调，也可以有异步回调，还可以有事件处理回调和延迟函数回调</p><h3 id="回调函数被使用的方式"><a href="#回调函数被使用的方式" class="headerlink" title="回调函数被使用的方式"></a>回调函数被使用的方式</h3><ul><li>异步调用（例如读取文件，进行HTTP请求，动态加载js文件，加载iframe资源后，图片加载完成执行回调等等）</li><li>事件监听器/处理器</li><li>setTimeout和setInterval方法</li><li>一般情况：精简代码</li></ul><h2 id="20-事件委托"><a href="#20-事件委托" class="headerlink" title="20. 事件委托"></a>20. 事件委托</h2><p><a href="https://juejin.im/post/5acb1bcf6fb9a028dc414fc6" target="_blank" rel="noopener">参考文章</a></p><p>将事件添加在父级元素，不去遍历元素的子节点，大大减少dom操作</p><h2 id="21-Event-Loop"><a href="#21-Event-Loop" class="headerlink" title="21. Event Loop"></a>21. Event Loop</h2><ul><li>macro-task：script(整体代码)、setTimeout/setInterval、I/O、UI rendering等。</li><li>micro-task：Promise。</li></ul><pre class=" language-js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行结果是：5 1 3 4 2</span><span class="token comment" spellcheck="true">//同步任务先于异步任务，微任务先于宏任务</span><span class="token comment" spellcheck="true">//微任务和宏任务皆为异步任务</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//同步回调</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//执行结果是：1 2 4 3</span><span class="token comment" spellcheck="true">//promise构造函数是同步执行的，then方法是异步执行的</span></code></pre><h2 id="22-订阅发布和观察者"><a href="#22-订阅发布和观察者" class="headerlink" title="22. 订阅发布和观察者"></a>22. 订阅发布和观察者</h2><p><a href="https://github.com/xianshannan/blog/issues/19" target="_blank" rel="noopener">参考文章</a></p><p>角色角度来看，订阅发布模式需要三种角色，发布者、事件中心和订阅者。二观察者模式需要两种角色，目标和观察者，无事件中心负责通信。</p><p>从耦合度上来看，订阅发布模式是一个事件中心调度模式，订阅者和发布者是没有直接关联的，通过事件中心进行关联，两者是<strong>解耦</strong>的。而观察者模式中目标和观察者是直接关联的，<strong>耦合在一起</strong>（有些观念说观察者是解耦，解耦的是业务代码，不是目标和观察者本身）。</p><h3 id="订阅发布"><a href="#订阅发布" class="headerlink" title="订阅发布"></a>订阅发布</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 所有 eventType 监听器回调函数（数组）</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 订阅事件   * @param {String} eventType 事件类型   * @param {Function} listener 订阅后发布动作触发的回调函数，参数为发布的数据   */</span>  <span class="token function">on</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 发布事件   * @param {String} eventType 事件类型   * @param {Any} data 发布的内容   */</span>  <span class="token function">emit</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>eventType<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>callbacks<span class="token punctuation">)</span> <span class="token punctuation">{</span>      callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">c</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token punctuation">)</span>event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> open<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 观察监听一个对象成员的变化 * @param {Object} obj 观察的对象 * @param {String} targetVariable 观察的对象成员 * @param {Function} callback 目标变化触发的回调 */</span><span class="token keyword">function</span> <span class="token function">observer</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> targetVariable<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    obj<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> targetVariable<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>targetVariable<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>targetVariable<span class="token punctuation">]</span> <span class="token operator">=</span> val      <span class="token comment" spellcheck="true">// 目标主动通知观察者</span>      callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>data<span class="token punctuation">[</span>targetVariable<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>data<span class="token punctuation">[</span>targetVariable<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="23-立即执行函数"><a href="#23-立即执行函数" class="headerlink" title="23. 立即执行函数"></a>23. 立即执行函数</h2><p><a href="https://zhuanlan.zhihu.com/p/22465092" target="_blank" rel="noopener">参考文章</a></p><h3 id="1-立即执行函数是什么"><a href="#1-立即执行函数是什么" class="headerlink" title="1. 立即执行函数是什么"></a>1. 立即执行函数是什么</h3><p>立即执行函数就是</p><ol><li>声明一个匿名函数</li><li>马上调用这个匿名函数</li></ol><h3 id="2-立即执行函数有什么用？"><a href="#2-立即执行函数有什么用？" class="headerlink" title="2. 立即执行函数有什么用？"></a>2. 立即执行函数有什么用？</h3><p>只有一个作用：创建一个独立的作用域。</p><p>这个作用域里面的变量，外面访问不到（即避免「变量污染」）。</p><pre class=" language-text"><code class="language-text">var liList = ul.getElementsByTagName('li')for(var i=0; i<6; i++){  !function(ii){    liList[ii].onclick = function(){      alert(ii) // 0、1、2、3、4、5    }  }(i)}</code></pre><p>在立即执行函数执行的时候，i 的值被赋值给 ii，此后 ii 的值一直不变。</p><h2 id="24-为什么JavaScript是单线程？"><a href="#24-为什么JavaScript是单线程？" class="headerlink" title="24. 为什么JavaScript是单线程？"></a>24. 为什么JavaScript是单线程？</h2><p><a href="https://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">参考文章</a></p><p>JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。</p><p>JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p><p>所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</p><p>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p><h2 id="25-CSS-篇"><a href="#25-CSS-篇" class="headerlink" title="25. CSS 篇"></a>25. CSS 篇</h2><h3 id="1-CSS隐藏页面的八种方法"><a href="#1-CSS隐藏页面的八种方法" class="headerlink" title="1. CSS隐藏页面的八种方法"></a>1. CSS隐藏页面的八种方法</h3><p><a href="https://juejin.im/post/584b645a128fe10058a0d625" target="_blank" rel="noopener">参考文章1</a></p><p><a href="https://75.team/post/five-ways-to-hide-elements-in-css.html" target="_blank" rel="noopener">参考文章2</a></p><p>藏元素的方法，总结如下：</p><blockquote><p>overflow:hidden<br>opacity:0；<br>visibility:hidden<br>display:none<br>position:absolute<br>clip(clip-path):rect()/inset()/polygon()<br>z-index:-1000<br>transform:scaleY(0)</p></blockquote><h4 id="1-overflow"><a href="#1-overflow" class="headerlink" title="1. overflow"></a>1. overflow</h4><p><strong>overflow的hidden用来隐藏元素溢出部分，占据空间，无法响应点击事件。</strong></p><h4 id="2-opacity"><a href="#2-opacity" class="headerlink" title="2. opacity"></a>2. opacity</h4><p><strong>因此，元素依然存在原来的位置，占据空间也可响应事件。</strong></p><h4 id="3-visibility"><a href="#3-visibility" class="headerlink" title="3. visibility"></a>3. visibility</h4><p><strong>被隐藏的元素依然会对我们的网页布局起作用。与 opacity 唯一不同的是它不会响应任何用户交互。</strong></p><h4 id="4-display"><a href="#4-display" class="headerlink" title="4. display"></a>4. display</h4><p><strong>经典的display隐藏元素,这个是彻底的隐藏了元素，不占据空间，也就不影响布局，当然也无法响应事件。</strong></p><h4 id="5-position"><a href="#5-position" class="headerlink" title="5. position"></a>5. position</h4><pre><code>.hide{    position：absolute;    left:-99999px;    top:-90999px;/* 不占据空间，无法点击 */}.hide-2{    position：relative;    left:-99999px;    top:-90999px;/* 占据空间，无法点击 */}</code></pre><p>假设有一个元素你想要与它交互，但是你又不想让它影响你的网页布局，没有合适的属性可以处理这种情况（opacity 和 visibility 影响布局， display 不影响布局但又无法直接交互）。</p><h4 id="6-clip-clip-path"><a href="#6-clip-clip-path" class="headerlink" title="6. clip/clip-path"></a>6. clip/clip-path</h4><pre><code>.hide{    position:absolute;/*fixed*/    clip:rect(top,right,bottom,left);/* 占据空间，无法点击 */}.hide_2 {  clip-path: polygon(0px 0px,0px 0px,0px 0px,0px 0px);}</code></pre><h4 id="7-z-index"><a href="#7-z-index" class="headerlink" title="7. z-index"></a>7. z-index</h4><pre><code>.hide{    position:absolute;    z-index:-1000;/* 不占据空间，无法点击 */}</code></pre><h4 id="8-transform"><a href="#8-transform" class="headerlink" title="8. transform"></a>8. transform</h4><pre><code>.hide{    transform: scale(0,0)/* 占据空间，无法点击 */}</code></pre><h3 id="2-CSS中如何实现垂直水平居中（Flex）"><a href="#2-CSS中如何实现垂直水平居中（Flex）" class="headerlink" title="2. CSS中如何实现垂直水平居中（Flex）"></a>2. CSS中如何实现垂直水平居中（Flex）</h3><p><a href="http://ife.baidu.com/note/detail/id/1549" target="_blank" rel="noopener">参考文章</a></p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> centent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"># 垂直居中<span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">align-item</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"># 水平垂直居中<span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-float"><a href="#3-float" class="headerlink" title="3. float"></a>3. float</h3><p><a href="https://www.cnblogs.com/chaixiaozhi/p/8481778.html" target="_blank" rel="noopener">参考文章</a></p><p>float被设计出来的初衷是用于——文字环绕效果</p><p>破坏性：被设置了float的元素会脱离文档流</p><p>包裹性：例如包裹文字</p><p>清空格：根本原因是由于float会导致节点脱离文档流结构</p><p>清除浮动：为父元素添加overflow:hidden</p><p>或增加一个伪类清除浮动</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>    *<span class="token property">zomm</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-什么是BFC？什么条件下会触发？应用场景有哪些？"><a href="#4-什么是BFC？什么条件下会触发？应用场景有哪些？" class="headerlink" title="4. 什么是BFC？什么条件下会触发？应用场景有哪些？"></a>4. 什么是BFC？什么条件下会触发？应用场景有哪些？</h3><h6 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><a href="http://47.98.159.95/my_blog/css/008.html" target="_blank" rel="noopener">参考文章</a></h6><h4 id="1-什么是BFC？"><a href="#1-什么是BFC？" class="headerlink" title="1. 什么是BFC？"></a>1. 什么是BFC？</h4><p>定义很难懂，在我理解BFC就是隔离了的独立容器，容器内元素布局不受外部影响</p><p>BFC 特性(功能)</p><ol><li>使 BFC 内部浮动元素不会到处乱跑；</li><li>和浮动元素产生边界。</li></ol><h4 id="2-触发条件"><a href="#2-触发条件" class="headerlink" title="2. 触发条件"></a>2. 触发条件</h4><p>一个HTML元素要创建BFC，则满足下列的任意一个或多个条件即可： 下列方式会创建块格式化上下文：</p><ul><li>根元素()</li><li>浮动元素（元素的 float 不是 none）</li><li>绝对定位元素（元素的 position 为 absolute 或 fixed）</li><li>行内块元素（元素的 display 为 inline-block）</li><li>表格单元格（元素的 display为 table-cell，HTML表格单元格默认为该值）</li><li>表格标题（元素的 display 为 table-caption，HTML表格标题默认为该值）</li><li>匿名表格单元格元素（元素的 display为 table、table-row、 table-row-group、table-header-group、table-footer-group（分别是HTML table、row、tbody、thead、tfoot的默认属性）或 inline-table）</li><li>overflow 值不为 visible 的块元素 -弹性元素（display为 flex 或 inline-flex元素的直接子元素）</li><li>网格元素（display为 grid 或 inline-grid 元素的直接子元素） 等等。</li></ul><h4 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3.应用场景"></a>3.应用场景</h4><h5 id="1-防止浮动导致父元素高度塌陷"><a href="#1-防止浮动导致父元素高度塌陷" class="headerlink" title="1. 防止浮动导致父元素高度塌陷"></a>1. 防止浮动导致父元素高度塌陷</h5><h5 id="2-避免外边距折叠"><a href="#2-避免外边距折叠" class="headerlink" title="2. 避免外边距折叠"></a>2. 避免外边距折叠</h5><h4 id="4-盒子模型"><a href="#4-盒子模型" class="headerlink" title="4. 盒子模型"></a>4. 盒子模型</h4><h5 id="1-W3C-标准盒模型："><a href="#1-W3C-标准盒模型：" class="headerlink" title="1. W3C 标准盒模型："></a>1. W3C 标准盒模型：</h5><p><em>属性width,height只包含内容content，不包含border和padding。</em></p><h5 id="2-IE-盒模型："><a href="#2-IE-盒模型：" class="headerlink" title="2. IE 盒模型："></a>2. IE 盒模型：</h5><p><em>属性width,height包含border和padding，指的是content+padding+border</em></p><p>因为若不声明DOCTYPE类型，IE浏览器会将盒子模型解释为IE盒子模型，FireFox等会将其解释为W3C盒子模型；<strong>若在页面中声明了DOCTYPE类型，所有的浏览器都会把盒模型解释为W3C盒模型。</strong></p><h2 id="26-告别阻塞：CSS-与-JS-的加载顺序优化"><a href="#26-告别阻塞：CSS-与-JS-的加载顺序优化" class="headerlink" title="26. 告别阻塞：CSS 与 JS 的加载顺序优化"></a>26. 告别阻塞：CSS 与 JS 的加载顺序优化</h2><p><a href="https://juejin.im/book/5b936540f265da0a9624b04b" target="_blank" rel="noopener">前端性能优化原理与实践</a></p><h3 id="CSS-的阻塞"><a href="#CSS-的阻塞" class="headerlink" title="CSS 的阻塞"></a>CSS 的阻塞</h3><p>浏览器在构建 CSSOM 的过程中，<strong>不会渲染任何已处理的内容</strong>。</p><blockquote><p>CSS 是阻塞渲染的资源。需要将它尽早、尽快地下载到客户端，以便缩短首次渲染的时间。</p></blockquote><p>尽早（将 CSS 放在 head 标签里）</p><p>尽快（启用 CDN 实现静态资源加载速度的优化）。</p><h3 id="JS-的阻塞"><a href="#JS-的阻塞" class="headerlink" title="JS 的阻塞"></a>JS 的阻塞</h3><p>JS 的作用在于<strong>修改</strong>，它帮助我们修改网页的方方面面：内容、样式以及它如何响应用户交互。这“方方面面”的修改，本质上都是对 DOM 和 CSSDOM 进行修改。因此 JS 的执行会阻止 CSSOM，在我们不作显式声明的情况下，它也会阻塞 DOM。</p><p><strong>JS 引擎是独立于渲染引擎存在的</strong></p><p>因此与其说是 JS 把 CSS 和 HTML 阻塞了，不如说是 JS 引擎抢走了渲染引擎的控制权。</p><h3 id="JS的三种加载方式"><a href="#JS的三种加载方式" class="headerlink" title="JS的三种加载方式"></a>JS的三种加载方式</h3><ul><li><p>正常模式：</p><pre><code>&lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;</code></pre></li></ul><p>这种情况下 JS 会阻塞浏览器，浏览器必须等待 index.js 加载和执行完毕才能去做其它事情。</p><ul><li><p>async 模式：</p><pre><code>&lt;script async src=&quot;index.js&quot;&gt;&lt;/script&gt;</code></pre></li></ul><p>async 模式下，JS 不会阻塞浏览器做任何其它的事情。它的加载是异步的，当它加载结束，JS 脚本会<strong>立即执行</strong>。</p><ul><li><p>defer 模式：</p><pre><code>&lt;script defer src=&quot;index.js&quot;&gt;&lt;/script&gt;</code></pre></li></ul><p>defer 模式下，JS 的加载是异步的，执行是<strong>被推迟的</strong>。等整个文档解析完成、DOMContentLoaded 事件即将被触发时，被标记了 defer 的 JS 文件才会开始依次执行。</p><p>从应用的角度来说，一般当我们的脚本与 DOM 元素和其它脚本之间的依赖关系不强时，我们会选用 async；当脚本依赖于 DOM 元素和其它脚本的执行结果时，我们会选用 defer。</p><h2 id="27-回流与重绘"><a href="#27-回流与重绘" class="headerlink" title="27. 回流与重绘"></a>27. 回流与重绘</h2><p><strong>重绘不一定导致回流，回流一定会导致重绘</strong></p><h3 id="回流的“导火索”"><a href="#回流的“导火索”" class="headerlink" title="回流的“导火索”"></a>回流的“导火索”</h3><ol><li><p>最“贵”的操作：改变 DOM 元素的几何属性（width、height、padding、margin、left、top、border）</p></li><li><p>“价格适中”的操作：改变 DOM 树的结构（增减、移动）</p></li><li><p>最容易被忽略的操作：获取一些特定属性的值</p></li></ol><p>（offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight ）</p><h3 id="如何规避回流与重绘"><a href="#如何规避回流与重绘" class="headerlink" title="如何规避回流与重绘"></a>如何规避回流与重绘</h3><h4 id="将“导火索”缓存起来，避免频繁改动"><a href="#将“导火索”缓存起来，避免频繁改动" class="headerlink" title="将“导火索”缓存起来，避免频繁改动"></a>将“导火索”缓存起来，避免频繁改动</h4><h4 id="避免逐条改变样式，使用类名去合并样式"><a href="#避免逐条改变样式，使用类名去合并样式" class="headerlink" title="避免逐条改变样式，使用类名去合并样式"></a>避免逐条改变样式，使用类名去合并样式</h4><h4 id="将-DOM-“离线”"><a href="#将-DOM-“离线”" class="headerlink" title="将 DOM “离线”"></a>将 DOM “离线”</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'100px'</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'200px'</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">'10px solid red'</span>container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token operator">...</span>（省略了许多类似的后续操作）container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span></code></pre><h3 id="Flush-队列：浏览器并没有那么简单"><a href="#Flush-队列：浏览器并没有那么简单" class="headerlink" title="Flush 队列：浏览器并没有那么简单"></a>Flush 队列：浏览器并没有那么简单</h3><h2 id="28-Webpack"><a href="#28-Webpack" class="headerlink" title="28. Webpack"></a>28. Webpack</h2><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul><li><strong>Entry</strong>：入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。</li><li><strong>Module</strong>：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。</li><li><strong>Chunk</strong>：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。</li><li><strong>Loader</strong>：模块转换器，用于把模块原内容按照需求转换成新内容。</li><li><strong>Plugin</strong>：扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</li><li><strong>Output</strong>：输出结果，在 Webpack 经过一系列处理并得出最终想要的代码后输出结果。</li></ul><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li><a href="http://www.xbhub.com/wiki/webpack/4优化/4-1缩小文件搜索范围.html" target="_blank" rel="noopener">4-1 缩小文件搜索范围</a></li><li><a href="http://www.xbhub.com/wiki/webpack/4优化/4-2使用DllPlugin.html" target="_blank" rel="noopener">4-2 使用 DllPlugin</a></li><li><a href="http://www.xbhub.com/wiki/webpack/4优化/4-3使用HappyPack.html" target="_blank" rel="noopener">4-3 使用 HappyPack</a></li><li><a href="http://www.xbhub.com/wiki/webpack/4优化/4-4使用ParallelUglifyPlugin.html" target="_blank" rel="noopener">4-4 使用 ParallelUglifyPlugin</a></li><li><a href="http://www.xbhub.com/wiki/webpack/4优化/4-5使用自动刷新.html" target="_blank" rel="noopener">4-5 使用自动刷新</a></li><li><a href="http://www.xbhub.com/wiki/webpack/4优化/4-6开启模块热替换.html" target="_blank" rel="noopener">4-6 开启模块热替换</a></li><li><a href="http://www.xbhub.com/wiki/webpack/4优化/4-7区分环境.html" target="_blank" rel="noopener">4-7 区分环境</a></li><li><a href="http://www.xbhub.com/wiki/webpack/4优化/4-8压缩代码.html" target="_blank" rel="noopener">4-8 压缩代码</a></li><li><a href="http://www.xbhub.com/wiki/webpack/4优化/4-9CDN加速.html" target="_blank" rel="noopener">4-9 CDN 加速</a></li><li><a href="http://www.xbhub.com/wiki/webpack/4优化/4-10使用TreeShaking.html" target="_blank" rel="noopener">4-10 使用 Tree Shaking</a></li><li><a href="http://www.xbhub.com/wiki/webpack/4优化/4-11提取公共代码.html" target="_blank" rel="noopener">4-11 提取公共代码</a></li><li><a href="http://www.xbhub.com/wiki/webpack/4优化/4-12按需加载.html" target="_blank" rel="noopener">4-12 按需加载</a></li><li><a href="http://www.xbhub.com/wiki/webpack/4优化/4-13使用Prepack.html" target="_blank" rel="noopener">4-13 使用 Prepack</a></li><li><a href="http://www.xbhub.com/wiki/webpack/4优化/4-14开启ScopeHoisting.html" target="_blank" rel="noopener">4-14 开启 Scope Hoisting</a></li><li><a href="http://www.xbhub.com/wiki/webpack/4优化/4-15输出分析.html" target="_blank" rel="noopener">4-15 输出分析</a></li></ul><p>热更新原理：</p><p>内部实现主要使用了<code>webpack</code>、<code>express</code>、<code>websocket</code>。</p><ul><li><p>使用<code>express</code>启动本地服务，当浏览器访问资源时对此做响应。</p></li><li><p>服务端和客户端使用<code>websocket</code>实现长连接</p></li><li><pre><code>webpack</code></pre><p>监听源文件的变化，即当开发者保存文件时触发</p><pre><code>webpack</code></pre><p>的重新编译。 </p><ul><li>每次编译都会生成<code>hash值</code>、<code>已改动模块的json文件</code>、<code>已改动模块代码的js文件</code></li><li>编译完成后通过<code>socket</code>向客户端推送当前编译的<code>hash戳</code></li></ul></li><li><p>客户端的</p><pre><code>websocket</code></pre><p>监听到有文件改动推送过来的</p><pre><code>hash戳</code></pre><p>，会和上一次对比 </p><ul><li>一致则走缓存</li><li>不一致则通过<code>ajax</code>和<code>jsonp</code>向服务端获取最新资源</li></ul></li><li><p>使用<code>内存文件系统</code>去替换有修改的内容实现局部刷新</p></li></ul><h3 id="29-继承"><a href="#29-继承" class="headerlink" title="29. 继承"></a>29. 继承</h3><p><a href="https://blog.csdn.net/lqlqlq007/article/details/96113594" target="_blank" rel="noopener">原文链接</a></p><p>原型链继承方式：</p><p>Son.prototype = new Father();</p><p>原型链继承的几个特点：</p><p>父类构造函数中的属性和方法都可以被子类继承；<br>父类原型上的属性和方法可以被继承；<br>父类实例上的属性和方法无法被继承；<br>父类构造函数中的属性和方法在所有子类实例中是共享的；<br>父类原型上的属性和方法在所有子类实例中是共享的；<br>创建子类实例时无法向父类构造函数传参（如果父类构造函数允许传参）。</p><p><a href="https://blog.csdn.net/lqlqlq007/article/details/96117093" target="_blank" rel="noopener">原文链接</a></p><p>构造函数继承方式：</p><p>Father.call(this, args);</p><p>构造函数继承的几个特点：</p><p>父类构造函数中的属性和方法都可以被子类继承；<br>父类原型上的属性和方法无法被继承；<br>父类实例上的属性和方法无法被继承；<br>父类构造函数中的属性和方法在所有子类实例中是不共享的；<br>创建子类实例时可以向父类构造函数传参；<br>允许多重继承（同时继承多个不同的父类）。</p><p><a href="https://blog.csdn.net/lqlqlq007/article/details/96309530" target="_blank" rel="noopener">原文链接</a></p><p>组合函数继承方式：</p><p>父类构造函数中的属性和方法都可以被子类继承；<br>父类原型上的属性和方法都可以被子类继承；<br>父类实例上的属性和方法无法被继承；<br>父类构造函数中的属性和方法在所有子类实例中是不共享的；<br>父类原型上的属性和方法在所有子类实例中是共享的；<br>创建子类实例时可以向父类构造函数传参；<br>允许多重继承（同时继承多个不同的父类）。</p><p><a href="https://juejin.im/post/5bcb2e295188255c55472db0#heading-3" target="_blank" rel="noopener">参考文章</a></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 继承属性</span>  <span class="token comment" spellcheck="true">// 第二次调用SuperType()</span>  SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承方法</span><span class="token comment" spellcheck="true">// 构建原型链</span><span class="token comment" spellcheck="true">// 第一次调用SuperType()</span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先继承了SuperType的属性和方法，但是我还再拷贝这些属性再加上我自己的</span><span class="token comment" spellcheck="true">// 重写SubType.prototype的constructor属性，指向自己的构造函数SubType</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType<span class="token punctuation">;</span> SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayAge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"red,blue,green,black"</span>instance1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"Nicholas";</span>instance1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//29</span><span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Greg"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"red,blue,green"</span>instance2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"Greg";</span>instance2<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//27</span></code></pre><h2 id="更多-1"><a href="#更多-1" class="headerlink" title="更多"></a>更多</h2><p><a href="http://www.xbhub.com/wiki/webpack/" target="_blank" rel="noopener">深入浅出Webpack</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试-手撕代码</title>
      <link href="/p/905b.html"/>
      <url>/p/905b.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-instanceof的的实现原理"><a href="#1-instanceof的的实现原理" class="headerlink" title="1. instanceof的的实现原理"></a>1. instanceof的的实现原理</h2><pre><code>while (x.__proto__) {  if (x.__proto__ === y.prototype) {    return true  }  x.__proto__ = x.__proto__.__proto__}if(x.__proto__ === null){  return false}</code></pre><p>判断x对象是否为y的一个实例，会在原型链上一直找，找到则返回true</p><pre class=" language-js"><code class="language-js"># 原理：<span class="token number">1</span><span class="token punctuation">.</span>对象的隐式原型 等于 其构造函数的显式原型的值 <span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Fn<span class="token punctuation">.</span>prototype <span class="token operator">===</span> fn<span class="token punctuation">.</span>__proto__# <span class="token number">2</span><span class="token punctuation">.</span> 最后Object原型对象的隐式原型指向<span class="token keyword">null</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span>   <span class="token comment" spellcheck="true">// true</span></code></pre><h2 id="3-防抖和节流"><a href="#3-防抖和节流" class="headerlink" title="3. 防抖和节流"></a>3. 防抖和节流</h2><p><a href="https://juejin.im/post/5c6bab91f265da2dd94c9f9e" target="_blank" rel="noopener">参考文章</a></p><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>规定时间还没走完，你又触发，我就重新算时间，<strong>只关心”最后一次”操作</strong></p><p>案例：输入搜索联想，用户在不断输入值时，用防抖来节约请求资源。</p><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>规定时间还没走完，你又触发，我不重新算时间，<strong>在规定时间内只触发一次</strong></p><p>案例： 滑到底部自动加载更多</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//防抖</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 节流</span><span class="token keyword">function</span>  <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>time<span class="token punctuation">)</span> <span class="token punctuation">{</span>      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        timer <span class="token operator">=</span> <span class="token keyword">null</span>        fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-数组去重"><a href="#4-数组去重" class="headerlink" title="4. 数组去重"></a>4. 数组去重</h2><p><code>const arr = [1, 1, 1, 2, 3, 4, 5, 5, 3, 2, 1, 1]</code><br>简单版</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>循环版</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> removeDrop <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      map<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> result<span class="token punctuation">}</span></code></pre><h2 id="5-new-的过程"><a href="#5-new-的过程" class="headerlink" title="5.  new 的过程"></a>5.  new 的过程</h2><p><a href="https://juejin.im/post/59bfe84351882531b730bac2" target="_blank" rel="noopener">参考文章</a></p><p>伪代码表示：</p><pre><code>var a = new myFunction(&quot;Li&quot;,&quot;Cherry&quot;);new myFunction{    var obj = {};    obj.__proto__ = myFunction.prototype;    var result=myFunction.call(obj,&quot;Li&quot;,&quot;Cherry&quot;);    return typeof result === &#39;obj&#39;? result : obj;}</code></pre><ol><li>创建一个空对象 obj;</li><li>将新创建的空对象的隐式原型指向其构造函数的显示原型。</li><li>使用 call 改变 this 的指向</li><li>如果无返回值或者返回一个非对象值，则将 obj 返回作为新对象；如果返回值是一个新对象的话那么直接直接返回该对象。</li></ol><p>所以我们可以看到，在 new 的过程中，我们是使用 call 改变了 this 的指向。</p><h2 id="6-圣杯布局"><a href="#6-圣杯布局" class="headerlink" title="6. 圣杯布局"></a>6. 圣杯布局</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">*</span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.header</span>,<span class="token class">.footer</span></span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.container</span></span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.middle</span></span><span class="token punctuation">{</span>        <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.left</span></span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.right</span></span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这里是头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左边<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中间部分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右边<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这里是底部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="7-实现一个call或apply"><a href="#7-实现一个call或apply" class="headerlink" title="7. 实现一个call或apply"></a>7. 实现一个call或apply</h2><p><a href="https://zhuanlan.zhihu.com/p/108289604?utm_source=wechat_session&utm_medium=social&utm_oi=1105813307885445120" target="_blank" rel="noopener">参考文章</a></p><p>先来看一个call实例，看看call到底做了什么：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>  value<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bar<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><p>从代码的执行结果，我们可以看到，call首先改变了this的指向，使函数的this指向了foo,然后使bar函数执行了。<br>总结一下：</p><ol><li>call改变函数this指向</li><li>调用函数</li></ol><p>思考一下：我们如何实现上面的效果呢？代码改造如下：</p><pre class=" language-js"><code class="language-js">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myCall <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将函数挂载到对象的fn属性上</span>  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//处理传入的参数</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//通过对象的属性调用该方法</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//删除该属性</span>  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>我们看一下上面的代码：</p><ol><li>首先我们对参数context做了兼容处理，不传值，context默认值为window；</li><li>然后我们将函数挂载到context上面,context.fn = this；</li><li>处理参数，将传入myCall的参数截取，去除第一位，然后转为数组；</li><li>调用context.fn，此时fn的this指向context；</li><li>删除对象上的属性 delete context.fn；</li><li>将结果返回。</li></ol><p>以此类推，我们顺便实现一下apply，唯一不同的是参数的处理,代码如下：</p><pre class=" language-js"><code class="language-js">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myApply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  context <span class="token operator">=</span> context <span class="token operator">||</span> window  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">let</span> result  <span class="token comment" spellcheck="true">// myApply的参数形式为(obj,[arg1,arg2,arg3]);</span>  <span class="token comment" spellcheck="true">// 所以myApply的第二个参数为[arg1,arg2,arg3]</span>  <span class="token comment" spellcheck="true">// 这里我们用扩展运算符来处理一下参数的传入方式</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span>…arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>以上便是call和apply的模拟实现，唯一不同的是对参数的处理方式。</p><h2 id="实现一个Function-prototype-bind"><a href="#实现一个Function-prototype-bind" class="headerlink" title="实现一个Function.prototype.bind"></a>实现一个Function.prototype.bind</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"zs"</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>  hobby<span class="token punctuation">:</span><span class="token string">"看书"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  将构造函数的this绑定为obj</span><span class="token keyword">let</span> changePerson <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  直接调用构造函数,函数会操作obj对象,给其添加三个属性;</span><span class="token function">changePerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  1、输出obj</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  用改变了this指向的构造函数,new一个实例出来</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">changePerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2、输出obj</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>仔细观察上面的代码，再看输出结果。</p><p>我们对Person类使用了bind将其this指向obj，得到了changeperson函数，此处如果我们直接调用changeperson会改变obj，若用new调用changeperson会得到实例 p,并且其<strong>proto</strong>指向Person,我们发现bind失效了。</p><p>我们得到结论：<strong>用bind改变了this指向的函数，如果用new操作符来调用，bind将会失效。</strong></p><p>这个对象就是这个构造函数的实例，那么只要在函数内部执行 <strong>this instanceof 构造函数</strong> 来判断其结果是否为true，就能判断函数是否是通过new操作符来调用了，若结果为true则是用new操作符调用的，代码修正如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// bind实现</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>mybind <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 1、保存函数</span>  <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2、保存目标对象</span>  <span class="token keyword">let</span> context <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">||</span>window<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 3、保存目标对象之外的参数,将其转化为数组;</span>  <span class="token keyword">let</span> rest <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 4、返回一个待执行的函数</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 5、将二次传递的参数转化为数组;</span>    <span class="token keyword">let</span> rest2 <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">F</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 6、若是用new操作符调用,则直接用new 调用原函数,并用扩展运算符传递参数</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">_this</span><span class="token punctuation">(</span><span class="token operator">...</span>rest2<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//7、用apply调用第一步保存的函数，并绑定this，传递合并的参数数组，即context._this(rest.concat(rest2))</span>      _this<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>rest<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>rest2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="45个值得收藏的-CSS-形状"><a href="#45个值得收藏的-CSS-形状" class="headerlink" title="45个值得收藏的 CSS 形状"></a><a href="https://zhuanlan.zhihu.com/p/79695262" target="_blank" rel="noopener">45个值得收藏的 CSS 形状</a></h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-自动生成express项目</title>
      <link href="/p/e0a0.html"/>
      <url>/p/e0a0.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/wgl0126/p/9290157.html" target="_blank" rel="noopener">参考文章</a></p><pre class=" language-javascript"><code class="language-javascript">npm install express <span class="token operator">--</span>save <span class="token operator">-</span>gnpm install express<span class="token operator">-</span>generator <span class="token operator">--</span>save <span class="token operator">-</span>g</code></pre><p>express-generator是express应用生成器，相当于express 的骨架，进入一个web项目中后，使用express projectname命令，能快速构建projectname这个应用的目录结构。</p><pre class=" language-javascript"><code class="language-javascript">express ‘你的项目名字’npm i</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-开启gzip配置</title>
      <link href="/p/662d.html"/>
      <url>/p/662d.html</url>
      
        <content type="html"><![CDATA[<p>开启gzip配置</p><p>压缩体积，传输更快</p><pre><code>npm i compressionconst compression = require(&#39;compression&#39;)app.use(compression())</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-初探koa</title>
      <link href="/p/ed87.html"/>
      <url>/p/ed87.html</url>
      
        <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意引入方式</span><span class="token comment" spellcheck="true">// 方式一</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 方式二</span><span class="token comment" spellcheck="true">// const Router = require('koa-router')</span><span class="token comment" spellcheck="true">// const router = new Router()</span><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-art-template'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-bodyparser'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token keyword">static</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-static'</span><span class="token punctuation">)</span><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-session'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 路由级中间件</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/test1'</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mmmm'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//koa中cookies无法直接设置中文</span>    <span class="token comment" spellcheck="true">// ctx.cookies.set('cookieTest', '中文')  </span>    <span class="token keyword">var</span> cookieTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer<span class="token punctuation">.</span>from</span><span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'cookieTest'</span><span class="token punctuation">,</span> cookieTest<span class="token punctuation">)</span>      ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>sessionTest <span class="token operator">=</span> <span class="token string">"会话"</span> <span class="token comment" spellcheck="true">//没有中文问题</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/test1'</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">"333"</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>state<span class="token punctuation">.</span>userinfo<span class="token punctuation">)</span>    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        content<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 动态路由</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/test2/:id'</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>params<span class="token punctuation">)</span>    <span class="token keyword">var</span> data1 <span class="token operator">=</span> ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'cookieTest'</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> data2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer<span class="token punctuation">.</span>from</span><span class="token punctuation">(</span>data1<span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>session<span class="token punctuation">.</span>sessionTest<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 登录，post请求</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/test3'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 配置koa-art-template</span><span class="token function">render</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token punctuation">{</span>    root<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    extname<span class="token punctuation">:</span> <span class="token string">'.html'</span><span class="token punctuation">,</span>    debug<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 配置session的中间件</span>app<span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'some secret hurr'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> CONFIG <span class="token operator">=</span> <span class="token punctuation">{</span>  key<span class="token punctuation">:</span> <span class="token string">'koa:sess'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/** (string) cookie key (default is koa:sess) */</span>  <span class="token comment" spellcheck="true">/** (number || 'session') maxAge in ms (default is 1 days) */</span>  <span class="token comment" spellcheck="true">/** 'session' will result in a cookie that expires when session/browser is closed */</span>  <span class="token comment" spellcheck="true">/** Warning: If a session cookie is stolen, this cookie will never expire */</span>  maxAge<span class="token punctuation">:</span> <span class="token number">86400000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/** 需要修改 */</span>  autoCommit<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/** (boolean) automatically commit headers (default true) */</span>  overwrite<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/** (boolean) can overwrite or not (default true) */</span>  httpOnly<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/** (boolean) 只有服务端能访问 (default true) */</span>  signed<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/** (boolean) signed or not (default true) */</span>  rolling<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/** 重新发请求，重新设置session  (default is false) */</span>  renew<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/** 需要修改false->true 用户有操作，重新设置session (default is false)*/</span>  sameSite<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/** (string) session cookie sameSite options (default null, don't set it) */</span><span class="token punctuation">}</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span>CONFIG<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./static'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//配置静态web服务的中间件</span>    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//获取表单数据中间件,要写在路由前面，否则不生效</span>    <span class="token comment" spellcheck="true">// 写中间件配置公共的信息，要写在路由前面，否则不生效</span>    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                   ctx<span class="token punctuation">.</span>state<span class="token punctuation">.</span>userinfo <span class="token operator">=</span> <span class="token string">'ed'</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// 启动路由</span>    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//推荐写上此配置</span>    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//应用级中间件</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//匹配路由之前打印日期</span>        <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//當前路由匹配完成以后继续向后匹配</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//错误处理中间件</span>            ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">404</span>            ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'404了'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-配置proxy,实现同时使用mock数据和后台接口的数据</title>
      <link href="/p/6074.html"/>
      <url>/p/6074.html</url>
      
        <content type="html"><![CDATA[<p>前端使用vue-element-admin，但遇到后台接口还没完成的情况下，</p><p>需要同时使用mock数据和后台接口的数据，我们可以通过配置webpack的proxy，</p><p>凡是/vue-element-admin开头的请求跳转请求mock，其他请求都请求真实的后台数据</p><p>我在写的时候参考这篇文章：<a href="https://www.cnblogs.com/xiayuscc/p/11063590.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiayuscc/p/11063590.html</a></p><p>但由于自己是新手，没有理解清晰，还是浪费了不少时间，</p><p>毕竟不同的后台，地址不同，照搬代码并不能保证成功，在此特别指出帮助理解。</p><h2 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h2><p>vue-cli 3的项目配置使用vue.config.js文件</p><pre class=" language-js"><code class="language-js">  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    port<span class="token punctuation">:</span> port<span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//默认true会自动打开页面</span>    overlay<span class="token punctuation">:</span> <span class="token punctuation">{</span>      warnings<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      errors<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// proxy配置参考：</span>    <span class="token comment" spellcheck="true">//https://webpack.docschina.org/configuration/dev-server/#devserver-proxy</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token punctuation">[</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>VUE_APP_BASE_API<span class="token operator">+</span><span class="token string">'/vue-element-admin'</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/mock`</span></span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//注意1：</span>    <span class="token comment" spellcheck="true">//因为这里并没有重写路径，因此VUE_APP_BASE_API(即/dev-api)会被传递</span>    <span class="token comment" spellcheck="true">//请求到 /vue-element-admin 现在会被代理到请求 http://localhost:${port}/mock/dev-api </span>      <span class="token punctuation">[</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>VUE_APP_BASE_API<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BACKGROUND_APPLICATION_URL<span class="token punctuation">,</span>         pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token punctuation">[</span><span class="token string">'^'</span> <span class="token operator">+</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>VUE_APP_BASE_API<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//注意2：</span>     <span class="token comment" spellcheck="true">//这里pathRewrite重写路径，则VUE_APP_BASE_API(即/dev-api)不会被传递</span>     <span class="token comment" spellcheck="true">//其他的请求 现在会被代理到请求 BACKGROUND_APPLICATION_URL(即http://localhost:8081/) </span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    before<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./mock/mock-server.js'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>.env.developmen文件</p><pre class=" language-js"><code class="language-js"># just a flagENV <span class="token operator">=</span> <span class="token string">'development'</span># base apiVUE_APP_BASE_API <span class="token operator">=</span> <span class="token string">'/dev-api'</span>VUE_CLI_BABEL_TRANSPILE_MODULES <span class="token operator">=</span> <span class="token boolean">true</span>BACKGROUND_APPLICATION_URL <span class="token operator">=</span> <span class="token string">'http://localhost:8081/'</span></code></pre><p>到这里就已经是成功啦。</p><h2 id="连带问题"><a href="#连带问题" class="headerlink" title="连带问题"></a>连带问题</h2><p>接下来是连带的两个小问题。</p><ol><li><p>由于vue-element-admin封装的axios，返回状态码不是20000，就当做错误拦截下来</p><p>因此，如果你的真实后台成功的返回状态码是200，只要在判断中添加<code>&amp;&amp; res.code !== 200</code>即可。</p></li></ol><p>utils/request.js</p><pre class=" language-js"><code class="language-js">response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> response<span class="token punctuation">.</span>data    <span class="token comment" spellcheck="true">// if the custom code is not 20000, it is judged as an error</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">20000</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        message<span class="token punctuation">:</span> res<span class="token punctuation">.</span>message <span class="token operator">||</span> <span class="token string">'Error'</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span>        duration<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><ol start="2"><li><p>为什么我在本地跑是正常的，我一部署到服务器上就报错呢？</p><p>因为webpack.devServer是DevDependencies，一旦打包上线，这个proxy代理就会失效。</p><p>解决方案nginx反向代理，nginx基本使用也不赘述，给一个配置的小案例</p></li></ol><pre class=" language-shell"><code class="language-shell">server {        # 监听9527端口        listen       9527;        server_name  localhost;        # 请求到 /dev-api/api 现在会被代理到请求 http://localhost:8081/api/        location /dev-api/api {            proxy_pass http://localhost:8081/api/;        }        error_page   500 502 503 504  /50x.html;        location = /50x.html {            root   html;        }    }</code></pre><p>记住<code>proxy_pass 地址的最后一个斜杠是关键</code></p><ul><li>访问 /dev-api/api时，如果代理地址最后有/，那么会转发到<a href="http://localhost:8081/api/" target="_blank" rel="noopener">http://localhost:8081/api/</a></li><li>访问/dev-api/api时，如果代理地址最后没有/，那么会转发到<a href="http://localhost:8081/api/dev-api/api" target="_blank" rel="noopener">http://localhost:8081/api/dev-api/api</a></li></ul><p>即有/，过滤掉 /dev-api/api</p><h2 id="拓展：跨域解决方案"><a href="#拓展：跨域解决方案" class="headerlink" title="拓展：跨域解决方案"></a>拓展：跨域解决方案</h2><p>前端方式：</p><ol><li><p>nginx反向代理</p></li><li><p>Webpack proxy(打包之后就失效了，只解决了开发环境下的跨域问题) </p></li><li><p>jsonp（相当于插入script标签，只能使用get请求）</p><p>   ​            </p></li></ol><p>后端方式： </p><p>cors，后端设置，前端不用管，设置响应头的<code>Access-Control-Allow-Methods</code>，<code>Access-Control-Allow-Headers</code>，<code>Access-Control-Allow-Origin</code></p><p>故推荐nginx反向代理和cors。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-撤回提交到github的代码</title>
      <link href="/p/fd37.html"/>
      <url>/p/fd37.html</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell"># 查看提交记录，找到上一次提交的版本号git log# 回退到某版本git reset  --hard  '版本号'git push origin HEAD --force</code></pre><p>详细请见：<a href="https://zhidao.baidu.com/question/2143411903971545108.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/2143411903971545108.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-提交代码至github命令</title>
      <link href="/p/ba68.html"/>
      <url>/p/ba68.html</url>
      
        <content type="html"><![CDATA[<p>不知道你是否刚使用git，但命令行又记得不是很熟，</p><p>本文简单速记，方便遗忘再次操作。</p><ol><li>初始化仓库</li><li>关联仓库</li><li>拉取代码</li><li>上传代码</li></ol><pre class=" language-shell"><code class="language-shell">git initgit remote add origin https://.....git pull origin mastergit add .git commit -m "first commit"git push origin master</code></pre><p>详细请看：<a href="https://gitee.com/help/articles/4122" target="_blank" rel="noopener">https://gitee.com/help/articles/4122</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-常用命令</title>
      <link href="/p/f446.html"/>
      <url>/p/f446.html</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">1.创建文件夹（shell同）    mkdir test 2.创建文件，可用来创建.开头的文件    touch test.js    3.添加到暂存区    git add .    4. 提交到git仓库，引号内容是描述    git commit -m ‘add xxx’    5. 提交到远程仓库（github）   git push origin master   git push origin master -f (强制提交)6. 删除文件   rm  -rf   test.js   git  rm   test.js   git commit -m ‘delete  xxx’    7. 查看信息   git config --list8. 下载代码   git clone  https:.....9. 初始化git本地版本管理仓库   git init 10. 显示工作目录和暂存区的状态   git status11. 远程库同步到本地库   git pull --rebase origin master12. 查看不同   git diff   git diff --cached   git diff HEAD13. 查看更新描述   git log   git log --oneline（只显示一行）   git log reflog (包含回退的记录) 14. 回退操作   git reset --hard '(版本号)'   git reset --hard HEAD 回到没有add的状态   git reset --hard HEAD^ (上一版)   git reset --hard HEAD~2 (上两版)15. 最新的一次但不修改描述信息   git commit --amend --no-edit</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
